#!/bin/sh
#
# Usage: dott [subcommand] [options]
#
# Available subcommands:
#
#   clone          Install dotfiles from a Git repository into ~/.dotfiles
#   update         Fetch new commits from the remote repository and optionally
#                  update subtree-merged remote repositories.
#   link           Symlink all the files in the dotfiles directory into the
#                  home directory.
#   unlink         Remove symlinks to files in the dotfiles directory from
#                  the home directory.
#   import         Take the name of a dotfile in $HOME, copy it to ~/.dotfiles
#                  and symlink it back into $HOME.
#
# Options for update:
# 
#   -s, --subtrees Also fetch new commits for merged subtrees and squash them
#                  into the local repository. This reads subtree directories
#                  and repositories from ~/.dotfiles/.gitsubtrees.
#
# Options for link:
#
#   -f, --force    Overwrite files even if they already exist.
#   -p, --pretend  Display results but don't actually change anything
#
# Options for unlink:
#
#   -p, --pretend  Display results but don't actually change anything
#
# Generic options:
#
#   -v, --version  Show version information
#   -h, --help     Show this message
#

set -e

readonly PROGRAM_NAME=$(basename $0)
readonly ARGS="$@"
readonly VERSION='0.1.0'
readonly DOTFILES_ROOT="$HOME/.dotfiles"
readonly DOTFILES_DIR="$DOTFILES_ROOT/home"

# Enable globbing to pick up hidden files
shopt -s dotglob

echo_heading() {
  echo "----> $@"
}

echo_red_label() {
  local readonly label=$1
  shift
  echo "\033[0;31m$label\033[0m$@"
}

echo_error() {
  echo_red_label 'Error: ' $@ >&2
}

echo_yellow_label() {
  local readonly label=$1
  shift
  echo "\033[1;33m$label\033[0m$@"
}

echo_green_label() {
  local readonly label=$1
  shift
  echo "\033[0;32m$label\033[0m$@"
}

indent_output() {
  sed 's/^/      /'
}

update() {
  # Transform long-form options into short-form options
  local arg=
  for arg
  do
    local delim=""
    case "$arg" in
      --subtrees) args="$args-s ";;
      *) [[ "${args:0:1}" == "-" ]] || delim="\""
        args="$args$delim$arg$delim ";;
    esac
  done
  eval set -- $args

  # Parse short-form options
  while getopts 's' OPTION
  do
    case $OPTION in
      s) local readonly git_subtrees=1;;
    esac
  done

  cd $DOTFILES_ROOT
  echo_heading 'Updating dotfiles repository'
  git pull --quiet --rebase 2>&1 | indent_output

  [[ -z $git_subtrees ]] && exit 0

  local readonly subtree_file="$DOTFILES_ROOT/.gitsubtrees"
  if [[ ! -f $subtree_file ]]
  then
    echo_error "$subtree_file does not exist."
    exit 1
  fi

  while IFS=" " read dir repo
  do
    if [[ ! -z "$repo" ]]
    then
      echo_heading "Updating subtree $dir"
      git subtree pull --squash --prefix "$dir" "$repo" master 2>&1 | indent_output
      sleep 1
    else
      echo_yellow_label 'Skip ' $dir
    fi
  done < $subtree_file
}

unlink() {
  # Transform long-form options into short-form options
  local arg=
  for arg
  do
    local delim=""
    case "$arg" in
      --pretend) args="$args-p ";;
      *) [[ "${args:0:1}" == "-" ]] || delim="\""
        args="$args$delim$arg$delim ";;
    esac
  done
  eval set -- $args

  # Parse short-form options
  while getopts 'p' OPTION
  do
    case $OPTION in
      p) readonly PRETEND=1;;
    esac
  done

  # Loop over files and unlink them
  for file in $DOTFILES_DIR/*
  do
    local target="$HOME/$(basename $file)"
    if [[ "$(readlink $target)" == "$file" ]]
    then
      echo_red_label 'Remove ' $file
      [[ -z $PRETEND ]] && rm $target
    else
      echo_yellow_label 'Skip   ' $file
    fi
  done
}

link() {
  # Transform long-form options into short-form options
  local arg=
  for arg
  do
    local delim=""
    case "$arg" in
      --force)   args="$args-f ";;
      --pretend) args="$args-p ";;
      *) [[ "${args:0:1}" == "-" ]] || delim="\""
        args="$args$delim$arg$delim ";;
    esac
  done
  eval set -- $args

  # Parse short-form options
  while getopts 'fp' OPTION
  do
    case $OPTION in
      f) readonly FORCE=1;;
      p) readonly PRETEND=1;;
    esac
  done

  # Loop over files and symlink them
  for file in $DOTFILES_DIR/*
  do
    local target="$HOME/$(basename $file)"
    if [[ -e $target && -z $FORCE ]]
    then
      echo_yellow_label 'Exists ' $file
    else
      if [[ -z $FORCE ]]
      then
        echo_green_label 'Link   ' $file
        [[ -z $PRETEND ]] && ln -sn $file $target
      else
        echo_red_label 'Force  ' $file
        [[ -z $PRETEND ]] && ln -snFf $file $target
      fi
    fi
  done
}

clone() {
  local readonly url="$1"
  if [[ -z $1 ]]
  then
    echo_error 'No url to clone from specified'
    exit 1
  fi

  if [[ -d $DOTFILES_ROOT ]]
  then
    echo_error "Directory $DOTFILES_ROOT already exists"
    exit 1
  fi

  echo_heading "Cloning $url into $DOTFILES_ROOT"
  git clone "$url" "$DOTFILES_ROOT" 2>&1 | indent_output
}

import() {
  local readonly file=$1
  if [[ -z "$file" ]] 
  then
    echo_error 'No file to import specified.'
    exit 1
  fi

  if [[ ! -f "$HOME/$file" ]]
  then
    echo_error "No such file $HOME/$file"
    exit 1
  fi

  if [[ -L "$HOME/$file" ]]
  then
    echo_error "File $HOME/$file is already a symlink"
    exit 1
  fi

  mv "$HOME/$file" "$DOTFILES_DIR/$file"
  ln -sn "$DOTFILES_DIR/$file" "$HOME/$file"
}

help() {
  sed 's/^# \{0,1\}//' $PROGRAM_NAME | sed -n '3,35p'
  exit 0
}

version() {
  echo $VERSION
  exit 0
}

main() {
  local readonly SUBCOMMAND=$1
  [[ -z "$SUBCOMMAND" ]] && help
  shift
  case "$SUBCOMMAND" in
    clone)        clone "$@";;
    update)       update "$@";;
    link)         link "$@";;
    unlink)       unlink "$@";;
    import)       import "$@";;
    --version|-v) version;;
    *)            help;;
  esac
}

main $ARGS
